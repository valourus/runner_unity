//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity restartableEntity { get { return GetGroup(GameMatcher.Restartable).GetSingleEntity(); } }
    public Sources.Components.RestartableComponent restartable { get { return restartableEntity.restartable; } }
    public bool hasRestartable { get { return restartableEntity != null; } }

    public GameEntity SetRestartable(Sources.Utils.RestartFase newFase) {
        if (hasRestartable) {
            throw new Entitas.EntitasException("Could not set Restartable!\n" + this + " already has an entity with Sources.Components.RestartableComponent!",
                "You should check if the context already has a restartableEntity before setting it or use context.ReplaceRestartable().");
        }
        var entity = CreateEntity();
        entity.AddRestartable(newFase);
        return entity;
    }

    public void ReplaceRestartable(Sources.Utils.RestartFase newFase) {
        var entity = restartableEntity;
        if (entity == null) {
            entity = SetRestartable(newFase);
        } else {
            entity.ReplaceRestartable(newFase);
        }
    }

    public void RemoveRestartable() {
        restartableEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Sources.Components.RestartableComponent restartable { get { return (Sources.Components.RestartableComponent)GetComponent(GameComponentsLookup.Restartable); } }
    public bool hasRestartable { get { return HasComponent(GameComponentsLookup.Restartable); } }

    public void AddRestartable(Sources.Utils.RestartFase newFase) {
        var index = GameComponentsLookup.Restartable;
        var component = CreateComponent<Sources.Components.RestartableComponent>(index);
        component.fase = newFase;
        AddComponent(index, component);
    }

    public void ReplaceRestartable(Sources.Utils.RestartFase newFase) {
        var index = GameComponentsLookup.Restartable;
        var component = CreateComponent<Sources.Components.RestartableComponent>(index);
        component.fase = newFase;
        ReplaceComponent(index, component);
    }

    public void RemoveRestartable() {
        RemoveComponent(GameComponentsLookup.Restartable);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRestartable;

    public static Entitas.IMatcher<GameEntity> Restartable {
        get {
            if (_matcherRestartable == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Restartable);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRestartable = matcher;
            }

            return _matcherRestartable;
        }
    }
}
