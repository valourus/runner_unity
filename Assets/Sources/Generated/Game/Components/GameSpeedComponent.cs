//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity speedEntity { get { return GetGroup(GameMatcher.Speed).GetSingleEntity(); } }
    public Sources.Components.SpeedComponent speed { get { return speedEntity.speed; } }
    public bool hasSpeed { get { return speedEntity != null; } }

    public GameEntity SetSpeed(float newValue) {
        if (hasSpeed) {
            throw new Entitas.EntitasException("Could not set Speed!\n" + this + " already has an entity with Sources.Components.SpeedComponent!",
                "You should check if the context already has a speedEntity before setting it or use context.ReplaceSpeed().");
        }
        var entity = CreateEntity();
        entity.AddSpeed(newValue);
        return entity;
    }

    public void ReplaceSpeed(float newValue) {
        var entity = speedEntity;
        if (entity == null) {
            entity = SetSpeed(newValue);
        } else {
            entity.ReplaceSpeed(newValue);
        }
    }

    public void RemoveSpeed() {
        speedEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Sources.Components.SpeedComponent speed { get { return (Sources.Components.SpeedComponent)GetComponent(GameComponentsLookup.Speed); } }
    public bool hasSpeed { get { return HasComponent(GameComponentsLookup.Speed); } }

    public void AddSpeed(float newValue) {
        var index = GameComponentsLookup.Speed;
        var component = CreateComponent<Sources.Components.SpeedComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceSpeed(float newValue) {
        var index = GameComponentsLookup.Speed;
        var component = CreateComponent<Sources.Components.SpeedComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveSpeed() {
        RemoveComponent(GameComponentsLookup.Speed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSpeed;

    public static Entitas.IMatcher<GameEntity> Speed {
        get {
            if (_matcherSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Speed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSpeed = matcher;
            }

            return _matcherSpeed;
        }
    }
}
